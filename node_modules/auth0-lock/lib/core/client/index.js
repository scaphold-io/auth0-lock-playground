'use strict';

exports.__esModule = true;
exports.hasFreeSubscription = hasFreeSubscription;
exports.connection = connection;
exports.pickConnections = pickConnections;

var _immutable = require('immutable');

var _index = require('../../connection/social/index');

var _enterprise = require('../../connection/enterprise');

// TODOL this module should depend from social stuff
function hasFreeSubscription(m) {
  return ["free", "dev"].indexOf(m.get("subscription")) > -1;
}

function connection(m, strategyName, name) {
  // TODO: this function should take a client, not a map with a client
  // key.
  var connections = strategy(m, strategyName).get("connections", (0, _immutable.List)());
  return connections.find(withName(name)) || (0, _immutable.Map)();
}

function strategy(m, name) {
  // TODO: this function should take a client, not a map with a client
  // key.
  return m.getIn(["client", "strategies"], (0, _immutable.List)()).find(withName(name)) || (0, _immutable.Map)();
}

function withName(name) {
  return function (x) {
    return x.get("name") === name;
  };
}

function strategyNameToConnectionType(str) {
  if (str === "auth0") {
    return "database";
  } else if (str === "email" || str === "sms") {
    return "passwordless";
  } else if (_index.STRATEGIES[str]) {
    return "social";
  } else if (_enterprise.STRATEGIES[str]) {
    return "enterprise";
  } else {
    return "unknown";
  }
}

function pickConnections(m, strs) {
  // NOTE: relevant m schema
  //
  // strategies: [
  //  {name: "strategy", connections: [{name: "connection"}]}
  // ]

  var order = strs.count() === 0 ? function (_) {
    return 0;
  } : function (c) {
    return strs.indexOf(c.get("name"));
  };

  var strategies = m.get("strategies", (0, _immutable.List)()).flatMap(function (s) {
    return s.get("connections").filter(function (c) {
      return order(c) >= 0;
    }).map(function (c) {
      return c.set("strategy", s.get("name")).set("type", strategyNameToConnectionType(s.get("name")));
    });
  });

  return strategies.sort(function (c1, c2) {
    return order(c1) - order(c2);
  }).groupBy(function (c) {
    return c.get("type");
  });
}
