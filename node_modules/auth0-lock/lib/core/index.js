'use strict';

exports.__esModule = true;
exports.reset = exports.auth = exports.ui = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

exports.setup = setup;
exports.id = id;
exports.clientID = clientID;
exports.domain = domain;
exports.assetsUrl = assetsUrl;
exports.setSubmitting = setSubmitting;
exports.submitting = submitting;
exports.setGlobalError = setGlobalError;
exports.globalError = globalError;
exports.clearGlobalError = clearGlobalError;
exports.setGlobalSuccess = setGlobalSuccess;
exports.globalSuccess = globalSuccess;
exports.clearGlobalSuccess = clearGlobalSuccess;
exports.rendering = rendering;
exports.stopRendering = stopRendering;
exports.withAuthOptions = withAuthOptions;
exports.render = render;
exports.setLoggedIn = setLoggedIn;
exports.loggedIn = loggedIn;
exports.warn = warn;
exports.error = error;
exports.allowedConnections = allowedConnections;
exports.connections = connections;
exports.connection = connection;
exports.hasOneConnection = hasOneConnection;
exports.hasOnlyConnections = hasOnlyConnections;
exports.hasSomeConnections = hasSomeConnections;
exports.findConnection = findConnection;
exports.hasConnection = hasConnection;
exports.runHook = runHook;
exports.emitEvent = emitEvent;
exports.loginErrorMessage = loginErrorMessage;
exports.stop = stop;
exports.hasStopped = hasStopped;
exports.emitAuthenticatedEvent = emitAuthenticatedEvent;
exports.emitAuthorizationErrorEvent = emitAuthorizationErrorEvent;
exports.hasFreeSubscription = hasFreeSubscription;

var _immutable = require('immutable');

var _immutable2 = _interopRequireDefault(_immutable);

var _media_utils = require('../utils/media_utils');

var _string_utils = require('../utils/string_utils');

var _url_utils = require('../utils/url_utils');

var _i18n = require('../i18n');

var i18n = _interopRequireWildcard(_i18n);

var _trim = require('trim');

var _trim2 = _interopRequireDefault(_trim);

var _gravatar_provider = require('../avatar/gravatar_provider');

var gp = _interopRequireWildcard(_gravatar_provider);

var _data_utils = require('../utils/data_utils');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _dataFns = (0, _data_utils.dataFns)(["core"]);

var get = _dataFns.get;
var init = _dataFns.init;
var remove = _dataFns.remove;
var reset = _dataFns.reset;
var set = _dataFns.set;
var tget = _dataFns.tget;
var tset = _dataFns.tset;
var tremove = _dataFns.tremove;
function setup(id, clientID, domain, options, hookRunner, emitEventFn) {
  var m = init(id, _immutable2.default.fromJS({
    assetsUrl: extractAssetsUrlOption(options, domain),
    auth: extractAuthOptions(options),
    clientID: clientID,
    domain: domain,
    emitEventFn: emitEventFn,
    hookRunner: hookRunner,
    allowedConnections: _immutable2.default.fromJS(options.allowedConnections || []),
    ui: extractUIOptions(id, options)
  }));

  m = i18n.initI18n(m);

  return m;
}

function id(m) {
  return m.get("id");
}

function clientID(m) {
  return get(m, "clientID");
}

function domain(m) {
  return get(m, "domain");
}

function assetsUrl(m) {
  return get(m, "assetsUrl");
}

function setSubmitting(m, value) {
  var error = arguments.length <= 2 || arguments[2] === undefined ? "" : arguments[2];

  m = tset(m, "submitting", value);
  m = clearGlobalSuccess(m);
  m = error && !value ? setGlobalError(m, error) : clearGlobalError(m);
  return m;
}

function submitting(m) {
  return tget(m, "submitting", false);
}

function setGlobalError(m, str) {
  return tset(m, "globalError", str);
}

function globalError(m) {
  return tget(m, "globalError", "");
}

function clearGlobalError(m) {
  return tremove(m, "globalError");
}

function setGlobalSuccess(m, str) {
  return tset(m, "globalSuccess", str);
}

function globalSuccess(m) {
  return tget(m, "globalSuccess", "");
}

function clearGlobalSuccess(m) {
  return tremove(m, "globalSuccess");
}

function rendering(m) {
  return tget(m, "render", false);
}

function stopRendering(m) {
  return tremove(m, "render");
}

function extractUIOptions(id, options) {
  var closable = options.container ? false : undefined === options.closable ? true : !!options.closable;
  var theme = options.theme || {};
  var logo = theme.logo;
  var primaryColor = theme.primaryColor;


  var avatar = options.avatar !== null;
  var customAvatarProvider = options.avatar && typeof options.avatar.url === "function" && typeof options.avatar.displayName === "function" && options.avatar;
  var avatarProvider = customAvatarProvider || gp;

  return new _immutable2.default.fromJS({
    containerID: options.container || 'auth0-lock-container-' + id,
    appendContainer: !options.container,
    autoclose: undefined === options.autoclose ? false : closable && options.autoclose,
    autofocus: undefined === options.autofocus ? !(options.container || (0, _media_utils.isSmallScreen)()) : !!options.autofocus,
    avatar: avatar,
    avatarProvider: avatarProvider,
    logo: typeof logo === "string" ? logo : undefined,
    closable: closable,
    language: undefined === options.language ? "en" : (0, _trim2.default)(options.language || "").toLowerCase(),
    dict: _typeof(options.languageDictionary) === "object" ? options.languageDictionary : {},
    disableWarnings: options.disableWarnings === undefined ? false : !!options.disableWarnings,
    mobile: undefined === options.mobile ? false : !!options.mobile,
    popupOptions: undefined === options.popupOptions ? {} : options.popupOptions,
    primaryColor: typeof primaryColor === "string" ? primaryColor : undefined,
    rememberLastLogin: undefined === options.rememberLastLogin ? true : !!options.rememberLastLogin
  });
}

var _dataFns2 = (0, _data_utils.dataFns)(["core", "ui"]);

var getUIAttribute = _dataFns2.get;
var ui = exports.ui = {
  containerID: function containerID(lock) {
    return getUIAttribute(lock, "containerID");
  },
  appendContainer: function appendContainer(lock) {
    return getUIAttribute(lock, "appendContainer");
  },
  autoclose: function autoclose(lock) {
    return getUIAttribute(lock, "autoclose");
  },
  autofocus: function autofocus(lock) {
    return getUIAttribute(lock, "autofocus");
  },
  avatar: function avatar(lock) {
    return getUIAttribute(lock, "avatar");
  },
  avatarProvider: function avatarProvider(lock) {
    return getUIAttribute(lock, "avatarProvider");
  },
  closable: function closable(lock) {
    return getUIAttribute(lock, "closable");
  },
  dict: function dict(lock) {
    return getUIAttribute(lock, "dict");
  },
  disableWarnings: function disableWarnings(lock) {
    return getUIAttribute(lock, "disableWarnings");
  },
  language: function language(lock) {
    return getUIAttribute(lock, "language");
  },
  logo: function logo(lock) {
    return getUIAttribute(lock, "logo");
  },
  mobile: function mobile(lock) {
    return getUIAttribute(lock, "mobile");
  },
  popupOptions: function popupOptions(lock) {
    return getUIAttribute(lock, "popupOptions");
  },
  primaryColor: function primaryColor(lock) {
    return getUIAttribute(lock, "primaryColor");
  },
  rememberLastLogin: function rememberLastLogin(lock) {
    return getUIAttribute(lock, "rememberLastLogin");
  }
};

var _dataFns3 = (0, _data_utils.dataFns)(["core", "auth"]);

var getAuthAttribute = _dataFns3.get;
var auth = exports.auth = {
  params: function params(lock) {
    return getAuthAttribute(lock, "params");
  },
  redirect: function redirect(lock) {
    return getAuthAttribute(lock, "redirect");
  },
  redirectUrl: function redirectUrl(lock) {
    return getAuthAttribute(lock, "redirectUrl");
  },
  responseType: function responseType(lock) {
    return getAuthAttribute(lock, "responseType");
  },
  sso: function sso(lock) {
    return getAuthAttribute(lock, "sso");
  }
};

function extractAuthOptions(options) {
  // TODO: shouldn't all options be namespased in authentication?
  var _ref = options.auth || {};

  var params = _ref.params;
  var redirect = _ref.redirect;
  var redirectUrl = _ref.redirectUrl;
  var responseType = _ref.responseType;
  var sso = _ref.sso;


  params = (typeof params === 'undefined' ? 'undefined' : _typeof(params)) === "object" ? params : {};
  redirectUrl = typeof redirectUrl === "string" && redirectUrl ? redirectUrl : undefined;
  redirect = typeof redirect === "boolean" ? redirect : true;
  responseType = typeof responseType === "string" ? responseType : redirectUrl ? "code" : "token";
  sso = typeof sso === "boolean" ? sso : true;

  if ((0, _trim2.default)(params.scope || "") === "openid profile") {
    warn(options, "Usage of scope 'openid profile' is not recommended. See https://auth0.com/docs/scopes for more details.");
  }

  return _immutable2.default.fromJS({
    params: params,
    redirect: redirect,
    redirectUrl: redirectUrl,
    responseType: responseType,
    sso: sso
  });
}

function withAuthOptions(m, opts) {
  return _immutable2.default.fromJS(opts).merge(get(m, "auth")).toJS();
}

function extractAssetsUrlOption(opts, domain) {
  if (opts.assetsUrl && typeof opts.assetsUrl === "string") {
    return opts.assetsUrl;
  }

  var domainUrl = "https://" + domain;
  var hostname = (0, _url_utils.parseUrl)(domainUrl).hostname;
  var DOT_AUTH0_DOT_COM = ".auth0.com";
  var AUTH0_US_CDN_URL = "https://cdn.auth0.com";
  if ((0, _string_utils.endsWith)(hostname, DOT_AUTH0_DOT_COM)) {
    var parts = hostname.split(".");
    return parts.length > 3 ? "https://cdn." + parts[parts.length - 3] + DOT_AUTH0_DOT_COM : AUTH0_US_CDN_URL;
  } else {
    return domainUrl;
  }
}

function render(m) {
  return tset(m, "render", true);
}

exports.reset = reset;
function setLoggedIn(m, value) {
  return tset(m, "loggedIn", value);
}

function loggedIn(m) {
  return tget(m, "loggedIn", false);
}

function warn(x, str) {
  var shouldOutput = _immutable.Map.isMap(x) ? !ui.disableWarnings(x) : !x.disableWarnings;

  if (shouldOutput && console && console.warn) {
    console.warn(str);
  }
}

function error(x, str) {
  var shouldOutput = _immutable.Map.isMap(x) ? !ui.disableWarnings(x) : !x.disableWarnings;

  if (shouldOutput && console && console.error) {
    console.error(str);
  }
}

function allowedConnections(m) {
  return get(m, "allowedConnections");
}

function connections(m) {
  for (var _len = arguments.length, strategies = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    strategies[_key - 2] = arguments[_key];
  }

  var type = arguments.length <= 1 || arguments[1] === undefined ? undefined : arguments[1];

  if (arguments.length === 1) {
    return get(m, "connections", (0, _immutable.Map)()).filter(function (v, k) {
      return k !== "unknown";
    }).valueSeq().flatten(true);
  }

  var xs = get(m, ["connections", type], (0, _immutable.List)());
  return strategies.length > 0 ? xs.filter(function (x) {
    return ~strategies.indexOf(x.get("strategy"));
  }) : xs;
}

function connection(m) {
  var type = arguments.length <= 1 || arguments[1] === undefined ? undefined : arguments[1];

  for (var _len2 = arguments.length, strategies = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
    strategies[_key2 - 2] = arguments[_key2];
  }

  return connections.apply(undefined, [m, type].concat(strategies)).get(0);
}

function hasOneConnection(m) {
  var type = arguments.length <= 1 || arguments[1] === undefined ? undefined : arguments[1];

  var xs = connections(m);
  return xs.count() === 1 && (!type || xs.getIn([0, "type"]) === type);
}

function hasOnlyConnections(m) {
  var type = arguments.length <= 1 || arguments[1] === undefined ? undefined : arguments[1];

  var all = connections(m).count();

  for (var _len3 = arguments.length, strategies = Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {
    strategies[_key3 - 2] = arguments[_key3];
  }

  var filtered = connections.apply(undefined, [m, type].concat(strategies)).count();
  return all > 0 && all === filtered;
}

function hasSomeConnections(m) {
  var type = arguments.length <= 1 || arguments[1] === undefined ? undefined : arguments[1];

  for (var _len4 = arguments.length, strategies = Array(_len4 > 2 ? _len4 - 2 : 0), _key4 = 2; _key4 < _len4; _key4++) {
    strategies[_key4 - 2] = arguments[_key4];
  }

  return connections.apply(undefined, [m, type].concat(strategies)).count() > 0;
}

function findConnection(m, name) {
  return connections(m).find(function (m1) {
    return m1.get("name") === name;
  });
}

function hasConnection(m, name) {
  return !!findConnection(m, name);
}

function runHook(m, str) {
  for (var _len5 = arguments.length, args = Array(_len5 > 2 ? _len5 - 2 : 0), _key5 = 2; _key5 < _len5; _key5++) {
    args[_key5 - 2] = arguments[_key5];
  }

  return get(m, "hookRunner").apply(undefined, [str, m].concat(args));
}

function emitEvent(m, str) {
  for (var _len6 = arguments.length, args = Array(_len6 > 2 ? _len6 - 2 : 0), _key6 = 2; _key6 < _len6; _key6++) {
    args[_key6 - 2] = arguments[_key6];
  }

  setTimeout(function () {
    return get(m, "emitEventFn").apply(undefined, [str].concat(args));
  }, 0);
}

function loginErrorMessage(m, error, type) {
  // NOTE: previous version of lock checked for status codes and, at
  // some point, if the status code was 401 it defaults to an
  // "invalid_user_password" error (actually the
  // "wrongEmailPasswordErrorText" dict entry) instead of checking
  // explicitly. We should figure out if there was a reason for that.

  if (error.status === 0) {
    return i18n.str(m, ["error", "login", "lock.network"]);
  }

  // Custom rule error (except blocked_user)
  if (error.code === "rule_error") {
    return error.description || i18n.str(m, ["error", "login", "lock.fallback"]);
  }

  var INVALID_MAP = {
    code: "lock.invalid_code",
    email: "lock.invalid_email_password",
    username: "lock.invalid_username_password"
  };

  var code = error.error || error.code;
  if (code === "invalid_user_password" && INVALID_MAP[type]) {
    code = INVALID_MAP[type];
  }

  return i18n.str(m, ["error", "login", code]) || i18n.str(m, ["error", "login", "lock.fallback"]);
}

// TODO: rename to something less generic that is easier to grep
function stop(m, error) {
  if (error) {
    setTimeout(function () {
      return emitEvent(m, "unrecoverable_error", error);
    }, 17);
  }

  return set(m, "stopped", true);
}

function hasStopped(m) {
  return get(m, "stopped");
}

function emitAuthenticatedEvent(m, result) {
  emitEvent(m, "authenticated", result);
}

function emitAuthorizationErrorEvent(m, error) {
  emitEvent(m, "authorization_error", error);
}

function hasFreeSubscription(m) {
  return get(m, "hasFreeSubscription");
}
