'use strict';

exports.__esModule = true;
exports.defaultProps = undefined;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _chrome = require('./chrome');

var _chrome2 = _interopRequireDefault(_chrome);

var _button = require('./button');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var badgeSvg = '<svg width="18px" height="21px" viewBox="0 0 18 21" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd" sketch:type="MSPage"><g id="Lock" sketch:type="MSArtboardGroup" transform="translate(-276.000000, -3229.000000)" fill-opacity="0.4" fill="#FFFFFF"><g id="SMS" sketch:type="MSLayerGroup" transform="translate(153.000000, 3207.000000)"><g id="Group" sketch:type="MSShapeGroup"><g id="Header" transform="translate(-0.500000, 0.000000)"><path d="M137.790429,38.4848167 L135.770249,32.1883757 L141.058325,28.2980192 L134.521693,28.2980192 L132.501273,22.001821 L132.500673,22.0001214 L139.038385,22.0001214 L141.059165,28.2974122 L141.059165,28.2972908 L141.060843,28.2963196 C142.234586,31.9495762 141.025835,36.1047125 137.790429,38.4848167 L137.790429,38.4848167 L137.790429,38.4848167 Z M127.211877,38.4848167 L127.210199,38.4860307 L132.499714,42.3773585 L137.790429,38.4849381 L132.501393,34.593489 L127.211877,38.4848167 L127.211877,38.4848167 Z M123.942542,28.296441 L123.942542,28.296441 C122.707175,32.147463 124.141203,36.2280579 127.210798,38.4855451 L127.211278,38.4836027 L129.231698,32.1875259 L123.9447,28.2978978 L130.479774,28.2978978 L132.500314,22.0016996 L132.500793,22 L125.962722,22 L123.942542,28.296441 L123.942542,28.296441 Z" id="Shape"></path></g></g></g></g></g></svg>';

var BottomBadge = function BottomBadge(_ref) {
  var link = _ref.link;
  return _react2.default.createElement(
    'span',
    { className: 'auth0-lock-badge-bottom' },
    _react2.default.createElement(
      'a',
      { href: link, target: '_blank', className: 'auth0-lock-badge' },
      _react2.default.createElement('span', { dangerouslySetInnerHTML: { __html: badgeSvg } })
    )
  );
};

var Avatar = function Avatar(_ref2) {
  var imageUrl = _ref2.imageUrl;
  return _react2.default.createElement('img', { src: imageUrl, className: 'auth0-lock-header-avatar' });
};

Avatar.propTypes = {
  imageUrl: _react2.default.PropTypes.string.isRequired
};

var EscKeyDownHandler = function () {
  function EscKeyDownHandler(f) {
    _classCallCheck(this, EscKeyDownHandler);

    this.handler = function (e) {
      if (e.keyCode == 27 && e.target.tagName != "INPUT") {
        f();
      }
    };
    global.document.addEventListener('keydown', this.handler, false);
  }

  EscKeyDownHandler.prototype.release = function release() {
    global.document.removeEventListener('keydown', this.handler);
  };

  return EscKeyDownHandler;
}();

var IPHONE = global.navigator && !!global.navigator.userAgent.match(/iPhone/i);

var Container = function (_React$Component) {
  _inherits(Container, _React$Component);

  function Container(props) {
    _classCallCheck(this, Container);

    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

    _this.state = { isOpen: false };
    return _this;
  }

  Container.prototype.componentDidMount = function componentDidMount() {
    var _this2 = this;

    if (this.props.isModal) {
      setTimeout(function () {
        return _this2.setState({ isOpen: true });
      }, 17);
    }

    this.escKeydown = new EscKeyDownHandler(this.handleEsc.bind(this));
  };

  Container.prototype.componentWillUnmount = function componentWillUnmount() {
    this.escKeydown.release();
  };

  Container.prototype.handleSubmit = function handleSubmit(e) {
    var _this3 = this;

    e.preventDefault();
    var submitHandler = this.props.submitHandler;

    if (submitHandler) {
      setTimeout(function () {
        if (!_this3.props.isSubmitting) {
          _this3.refs.chrome.focusError();
        }
      }, 17);
      submitHandler();
    }
  };

  Container.prototype.handleClose = function handleClose() {
    var _props = this.props;
    var closeHandler = _props.closeHandler;
    var isSubmitting = _props.isSubmitting;

    if (!isSubmitting) {
      closeHandler();
    }
  };

  Container.prototype.handleEsc = function handleEsc() {
    var _props2 = this.props;
    var closeHandler = _props2.closeHandler;
    var escHandler = _props2.escHandler;

    escHandler ? escHandler() : this.handleClose();
  };

  Container.prototype.hide = function hide() {
    this.setState({ isOpen: false });
  };

  Container.prototype.render = function render() {
    var _props3 = this.props;
    var autofocus = _props3.autofocus;
    var avatar = _props3.avatar;
    var auxiliaryPane = _props3.auxiliaryPane;
    var backHandler = _props3.backHandler;
    var badgeLink = _props3.badgeLink;
    var closeHandler = _props3.closeHandler;
    var contentComponent = _props3.contentComponent;
    var contentProps = _props3.contentProps;
    var disableSubmitButton = _props3.disableSubmitButton;
    var disallowClose = _props3.disallowClose;
    var error = _props3.error;
    var isMobile = _props3.isMobile;
    var isModal = _props3.isModal;
    var isSubmitting = _props3.isSubmitting;
    var logo = _props3.logo;
    var primaryColor = _props3.primaryColor;
    var screenName = _props3.screenName;
    var showBadge = _props3.showBadge;
    var submitHandler = _props3.submitHandler;
    var success = _props3.success;
    var tabs = _props3.tabs;
    var terms = _props3.terms;
    var title = _props3.title;
    var transitionName = _props3.transitionName;


    var overlay = isModal ? _react2.default.createElement('div', { className: 'auth0-lock-overlay' }) : null;

    var className = "auth0-lock";

    if (isModal && this.state.isOpen) {
      className += " auth0-lock-opened";
    }

    if (!isModal) {
      className += " auth0-lock-opened-in-frame";
    }

    if (isMobile) {
      className += " auth0-lock-mobile";
    }

    if (isSubmitting) {
      className += " auth0-lock-mode-loading";
    }

    if (auxiliaryPane) {
      className += " auth0-lock-auxiliary";
    }

    if (!submitHandler) {
      className += " auth0-lock-no-submit";
    }

    if (terms) {
      className += " auth0-lock-with-terms";
    }

    if (IPHONE) {
      className += " auth0-lock-iphone";
    }

    // TODO: this no longer makes sense, instead of taking a tabs
    // prop we should take extra class names.
    if (tabs) {
      className += " auth0-lock-with-tabs";
    }

    return _react2.default.createElement(
      'div',
      { className: className, ref: 'container' },
      overlay,
      _react2.default.createElement(
        'div',
        { className: 'auth0-lock-center' },
        _react2.default.createElement(
          'form',
          { className: 'auth0-lock-widget', onSubmit: this.handleSubmit.bind(this) },
          avatar && _react2.default.createElement(Avatar, { imageUrl: avatar }),
          closeHandler && _react2.default.createElement(_button.CloseButton, { onClick: this.handleClose.bind(this) }),
          _react2.default.createElement(
            'div',
            { className: 'auth0-lock-widget-container' },
            _react2.default.createElement(_chrome2.default, {
              autofocus: autofocus,
              avatar: avatar,
              auxiliaryPane: auxiliaryPane,
              backHandler: backHandler,
              contentComponent: contentComponent,
              contentProps: contentProps,
              disableSubmitButton: disableSubmitButton,
              error: error,
              isSubmitting: isSubmitting,
              logo: logo,
              screenName: screenName,
              primaryColor: primaryColor,
              ref: 'chrome',
              showSubmitButton: !!submitHandler,
              success: success,
              tabs: tabs,
              terms: terms,
              title: title,
              transitionName: transitionName
            })
          )
        ),
        _react2.default.createElement(
          'div',
          { style: { visibility: showBadge ? "visible" : "hidden" } },
          _react2.default.createElement(BottomBadge, { link: badgeLink })
        )
      )
    );
  };

  return Container;
}(_react2.default.Component);

exports.default = Container;


Container.propTypes = {
  autofocus: _react2.default.PropTypes.bool.isRequired,
  avatar: _react2.default.PropTypes.string,
  auxiliaryPane: _react2.default.PropTypes.element,
  backHandler: _react2.default.PropTypes.func,
  badgeLink: _react2.default.PropTypes.string.isRequired,
  closeHandler: _react2.default.PropTypes.func,
  contentComponent: _react2.default.PropTypes.func.isRequired, // TODO: it also can be a class component
  contentProps: _react2.default.PropTypes.object.isRequired,
  disableSubmitButton: _react2.default.PropTypes.bool.isRequired,
  error: _react2.default.PropTypes.string,
  isMobile: _react2.default.PropTypes.bool.isRequired,
  isModal: _react2.default.PropTypes.bool.isRequired,
  isSubmitting: _react2.default.PropTypes.bool.isRequired,
  logo: _react2.default.PropTypes.string.isRequired,
  primaryColor: _react2.default.PropTypes.string.isRequired,
  screenName: _react2.default.PropTypes.string.isRequired,
  showBadge: _react2.default.PropTypes.bool.isRequired,
  success: _react2.default.PropTypes.string,
  tabs: _react2.default.PropTypes.bool,
  terms: _react2.default.PropTypes.element,
  title: _react2.default.PropTypes.string.isRequired,
  transitionName: _react2.default.PropTypes.string.isRequired
  // escHandler
  // submitHandler,
};

// NOTE: detecting the file protocol is important for things like electron.
var isFileProtocol = global.window && global.window.location && global.window.location.protocol === "file:";

var defaultProps = exports.defaultProps = Container.defaultProps = {
  autofocus: false,
  badgeLink: "https://auth0.com/",
  contentProps: {},
  disableSubmitButton: false,
  isMobile: false,
  isSubmitting: false,
  logo: (isFileProtocol ? "https:" : "") + '//cdn.auth0.com/styleguide/1.0.0/img/badge.png',
  primaryColor: "#ea5323",
  showBadge: true

};
