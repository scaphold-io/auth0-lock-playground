'use strict';

exports.__esModule = true;
exports.startHRD = startHRD;
exports.cancelHRD = cancelHRD;
exports.logIn = logIn;

var _index = require('../../store/index');

var _enterprise = require('../enterprise');

var _index2 = require('../../field/index');

var _actions = require('../../core/actions');

var _index3 = require('../database/index');

function startHRD(id, email) {
  (0, _index.swap)(_index.updateEntity, "lock", id, _enterprise.toggleHRD, email);
}

// TODO: enterprise connections should not depend on database
// connections. However, we now allow a username input to contain also
// an email and this information is in the database module. We should
// make this information flow from the UI (like we do for the startHRD
// function). Including this dependency here allows us to do that
// incrementally.
function cancelHRD(id) {
  (0, _index.swap)(_index.updateEntity, "lock", id, _enterprise.toggleHRD, false);
}

function logIn(id) {
  var m = (0, _index.read)(_index.getEntity, "lock", id);
  var email = (0, _index2.getFieldValue)(m, (0, _index3.databaseLogInWithEmail)(m) ? "email" : "username");
  var ssoConnection = (0, _enterprise.matchConnection)(m, email);

  if (ssoConnection && !(0, _enterprise.isHRDActive)(m)) {
    return logInSSO(id, ssoConnection);
  }

  logInActiveFlow(id);
}

function logInActiveFlow(id) {
  var m = (0, _index.read)(_index.getEntity, "lock", id);
  var usernameField = (0, _enterprise.isHRDActive)(m) || !(0, _index3.databaseLogInWithEmail)(m) ? "username" : "email";

  var username = (0, _index2.getFieldValue)(m, usernameField);

  (0, _actions.logIn)(id, ["password", usernameField], {
    connection: (0, _enterprise.enterpriseActiveFlowConnection)(m).get("name"),
    username: username,
    password: (0, _index2.getFieldValue)(m, "password"),
    login_hint: username
  });
}

function logInSSO(id, connection) {
  var m = (0, _index.read)(_index.getEntity, "lock", id);
  var field = (0, _index3.databaseLogInWithEmail)(m) ? "email" : "username";
  (0, _actions.logIn)(id, [field], {
    connection: connection.get("name"),
    login_hint: (0, _index2.getFieldValue)(m, field)
  });
}
